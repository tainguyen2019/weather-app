{"version":3,"sources":["component/CityList/index.jsx","component/WeatherCard/index.jsx","component/Loading/index.jsx","component/WeatherList/index.jsx","App.js","serviceWorker.js","index.js"],"names":["CityList","className","cities","map","city","key","id","to","name","Component","WeatherCard","forecast","this","props","time","src","process","icon","alt","temp","temp_min","temp_max","Loading","WeatherList","state","result","undefined","error","loading","match","params","getDailyWeather","get5DaysForecast","fetch","then","response","ok","Error","status","json","setState","catch","message","finally","oldState","list","arrayForecast","item","dateKey","DayJS","dt","format","dayForecasts","Math","round","main","weather","forecastByDay","groupForecastByDay","find","Number","Fragment","Object","keys","day","formatDataForecast","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.8b450816.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport cities from \"../../data/city.json\";\r\nimport \"./styles.css\";\r\n\r\nclass CityList extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"city-list\">\r\n        {cities.map((city) => (\r\n          <div className=\"city\" key={city.id}>\r\n            <Link to={`/weather/${city.id}`}>{city.name}</Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityList;\r\n","import React, { Component } from \"react\";\r\nimport './styles.css';\r\n\r\nclass WeatherCard extends Component {\r\n  render() {\r\n    const { forecast } = this.props;\r\n    return (\r\n      <div className=\"weather-card\">\r\n        <p>{forecast.time}</p>\r\n        <img\r\n          src={`${process.env.REACT_APP_IMAGE_URL}/${forecast.icon}.png`}\r\n          alt=\"icon\"\r\n        />\r\n        <p>Temp: {forecast.temp}</p>\r\n        <p>Temp min: {forecast.temp_min}</p>{\" \"}\r\n        <p>Temp max: {forecast.temp_max}</p>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nclass Loading extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"loading-container\">\r\n          <div className=\"loader\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;\r\n","import React, { Component } from \"react\";\r\nimport DayJS from \"dayjs\";\r\nimport WeatherCard from \"../WeatherCard\";\r\nimport Loading from '../Loading';\r\nimport cities from \"../../data/city.json\";\r\nimport \"./styles.css\";\r\n\r\nclass WeatherList extends Component {\r\n  state = {\r\n    result: undefined,\r\n    error: \"\",\r\n    forecast: [],\r\n    loading: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n\r\n    this.getDailyWeather(id);\r\n    this.get5DaysForecast(id);\r\n  }\r\n\r\n  getDailyWeather(id) {\r\n    fetch(\r\n      `${process.env.REACT_APP_API_URL}/weather?appid=${process.env.REACT_APP_API_KEY}&id=${id}`,\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`Request failed with status = ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((result) => {\r\n        this.setState({ result });\r\n      })\r\n      .catch((error) => this.setState({ error: error.message }))\r\n      .finally(() => {\r\n        this.setState(oldState => ({\r\n          loading: !oldState.loading,\r\n        }))\r\n      });\r\n  }\r\n\r\n  get5DaysForecast(id) {\r\n    fetch(\r\n      `${process.env.REACT_APP_API_URL}/forecast?appid=${process.env.REACT_APP_API_KEY}&id=${id}`,\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`Request failed with status = ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((result) => {\r\n        this.setState({ forecast: result.list });\r\n      })\r\n      .catch((error) => this.setState({ error: error.message }))\r\n      .finally(() => {\r\n        this.setState(oldState => ({\r\n          loading: !oldState.loading,\r\n        }))\r\n      });\r\n  }\r\n\r\n  groupForecastByDay(arrayForecast) {\r\n    const result = {};\r\n\r\n    for (let item of arrayForecast) {\r\n      const dateKey = DayJS(item.dt * 1000).format(\"dddd, MMMM D, YYYY\");\r\n      const dayForecasts = result[dateKey] || [];\r\n      result[dateKey] = [...dayForecasts, item];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  formatDataForecast(forecast) {\r\n    const result = {};\r\n    result[\"time\"] = DayJS(forecast.dt * 1000).format(\"HH:mm\");\r\n    result[\"temp\"] = `${Math.round(forecast.main.temp - 273)} 째C`;\r\n    result[\"temp_min\"] = `${Math.round(forecast.main.temp_min - 273)} 째C`;\r\n    result[\"temp_max\"] = `${Math.round(forecast.main.temp_max - 273)} 째C`;\r\n    result[\"icon\"] = forecast.weather[0].icon;\r\n\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    const { id } = this.props.match.params;\r\n    const { result, error, forecast, loading } = this.state;\r\n    const forecastByDay = this.groupForecastByDay(forecast);\r\n\r\n    const city = cities.find((city) => city.id === Number(id));\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          {loading && <Loading />}\r\n          {result && (\r\n            <div className=\"container\">\r\n              <div className=\"city-name\">\r\n                <p className=\"title\">{city.name}</p>\r\n                <span className=\"date\">\r\n                  {DayJS(result.dt * 1000).format(\"hh:mma, dddd, MMMM D, YYYY\")}\r\n                </span>\r\n              </div>\r\n              <div className=\"temp-container\">\r\n                <img\r\n                  src={`${process.env.REACT_APP_IMAGE_URL}/${result.weather[0].icon}.png`}\r\n                  alt=\"icon\"\r\n                />\r\n                <span className=\"temp\">\r\n                  {Math.round(result.main.temp - 273)}째C\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {error}\r\n          <div>\r\n            {Object.keys(forecastByDay).map((day) => {\r\n              const dayForecasts = forecastByDay[day];\r\n              return (\r\n                <div key={day}>\r\n                  <h3>{day}</h3>\r\n                  <div className=\"weather-forecast-list\">\r\n                    {dayForecasts.map((forecast) => (\r\n                      <WeatherCard\r\n                        key={forecast.dt}\r\n                        forecast={this.formatDataForecast(forecast)}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherList;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CityList from './component/CityList';\r\nimport WeatherList from './component/WeatherList';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/weather/:id\" exact component={WeatherList} />\r\n          <Route path=\"/\" exact>\r\n            <CityList />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}